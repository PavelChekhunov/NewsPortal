 # Список всех команд, запускаемых в Django shell.
 # ___________________________________________________

    from news.models import *

 # 1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

#>>>
    user1 = User.objects.create_user('user1')
    user2 = User.objects.create_user('user2', password='pwd2')


 # 2. Создать два объекта модели Author, связанные с пользователями.

 #>>>
    Author.objects.create(user=user1)            # используя ссылку на объект из пункта 1.
    users = User.objects.all()
    Author.objects.create(user=users[1])         # используя ссылку на второй объект из users.


 # 3. Добавить 4 категории в модель Category.

 #>>>
    Category.objects.create(name='Общие знания')
    Category.objects.create(name='IT-сфера')
    Category.objects.create(name='Космос')
    Category.objects.create(name='История')


 # 4. Добавить 2 статьи и 1 новость.

 #>>>
    art1_text='Все изобретения человечества не берутся из ниоткуда. Их предвосхищают годы научных опытов и изобретений. \
 Своим непосредственным появлением компьютерная сеть обязана военным разработкам. В 1958 году президент США \
 Д.Эйзенхауэр издал распоряжение о формировании управления перспективных исследовательских проектов \
 Министерства обороны США ARPA, в котором стали трудиться лучшие учёные США. \
 Принято считать, что у истоков исследования стоял доктор Джозеф Ликлидер, ставший главой "компьютерно-военного" \
 проекта в 1962 году. Американский учёный заложил основы ARPANET (компьютерная сеть), \
 сумев привлечь к научным изысканиям частные компании и университеты.'

    authors=Author.objects.all()
    Post.objects.create(author=authors.first(), post_type='ART', title='История интернета', text=art1_text)
    Post.objects.create(author=authors[1], post_type='ART', title='Космос: Большое путешествие по Вселенной')

    art2_text='Вначале было Ничего. Примерно 13 миллиардов и 800 миллионов лет назад, судя по современным оценкам \
 случилось то, что астрономы и физики называют Большой взрыв. До этого события не было ни пространства, \
 ни времени в известном нам понимании.'
    post2=Post.objects.all()[1]
    post2.text=art2_text
    post2.save()

    post3=Post.objects.create(author=authors[0], title='Canon начала продавать оборудование для выпуска 5-нм чипов без фотолитографии')
    post3.text='Установка Canon FPA-1200NZ2C нового поколения позволяет наносить на кремниевые пластины рисунок \
 с минимальными размерами в 14 нм, что позволяет получать чипы, которые по своим характеристикам соответствуют \
 5-нм аналогам ведущих мировых производителей, изготовленным с использованием так называемой EUV-​литографии.'
    post3.save()


 # 5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

 #>>>
    posts=Post.objects.all()
    categories=Category.objects
    cat1=categories.get(name='IT-сфера')
    cat2=categories.get(name='История')
    posts[0].category.add(cat1)
    posts[0].category.add(cat2)
    posts[1].category.add(categories.get(name='Космос'))
    # posts[1].category.add(categories.get(name='Общие знания'))
    cat1=categories.filter(name='Общие знания')
    posts[1].category.add(cat1[0]) if cat1.exists() else print('No such category')
    posts[2].category.add(categories.get(name='Общие знания'))
    posts[2].category.add(categories.get(name='IT-сфера'))


 # 6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

 #>>>
    # использую <QuerySet> posts из пункта 5 и users из пункта 2.
    Comment.objects.create(post=posts[0], user=users[0], text='Комментарий 1')
    Comment.objects.create(post=posts[0], user=users[1], text='Комментарий 2')
    Comment.objects.create(post=posts[1], user=users[0], text='Комментарий 3')
    Comment.objects.create(post=posts[2], user=users[1], text='Комментарий 4')


 # 7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

 #>>>
    # использую <QuerySet> posts из пункта 5
    posts[0].like()
    posts[0].dislike()
    [posts[0].like() for _ in range(3)]
    posts[1].like()
    posts[1].dislike()
    [posts[1].like() for _ in range(4)]
    posts[1].dislike()
    posts[2].like()
    comments=Comment.objects.all()
    [comments[0].like() for _ in range(2)]
    comments[0].dislike()
    comments[1].like()
    [comments[1].like() for _ in range(3)]
    [comments[2].like() for _ in range(2)]
    comments[3].dislike()


 # 8. Обновить рейтинги пользователей.

 #>>>
    for author in Author.objects.all():
        author.update_rating()


 # 9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

 #>>>
    the_best_author=Author.objects.order_by('-rating')[0]
    print(f'{the_best_author.user.username} : rating = {the_best_author.rating}')


 # 10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
 #     основываясь на лайках/дислайках к этой статье.

 #>>>
    the_best_post=Post.objects.order_by('-rating')[0]
    print('{0}, {1}, rating={2}, title="{3}"\n{4}'.format(the_best_post.datetime_created.strftime("%Y-%m-%d"),
        the_best_post.author.user.username, the_best_post.rating, the_best_post.title, the_best_post.preview()))


 # 11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

 #>>>
    # the_best_post из предыдущего пункта.
    for item in Comment.objects.filter(post=the_best_post):
        print('{0}, {1}, rating={2},\n{3}'.format(item.datetime_created.strftime("%Y-%m-%d"),
            item.user.username, item.rating, item.text))
